{"version":3,"sources":["App.js","index.js"],"names":["NameForm","props","data","useState","s","setS","console","log","type","value","onChange","event","target","onClick","NaN","alert","setContry","Graph","year","Italy","America","Germany","Korea","England","Switzerland","Luxembourg","France","Canada","Japan","data2","color","contry","mx","Math","max","ceil","map","item","mx2","japanPre2","contPre2","japanPre","contPre","className","width","height","transform","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","rx","ry","fill","x","length","y","textAnchor","dominantBaseline","i","key","App","render","document","querySelector"],"mappings":"kKAEMA,EAAW,SAACC,GAChB,IAAMC,EAAO,CAAC,QAAW,UAAW,UAAW,QAAS,UAAW,cAAe,aAAc,SAAU,UADhF,EAaRC,mBAAS,IAbD,mBAanBC,EAbmB,KAahBC,EAbgB,KAe1B,OADAC,QAAQC,IAAIH,GAEV,6BACE,oEACA,2TACA,+BAEE,2BAAOI,KAAK,OAAOC,MAAOL,EAAGM,SAXpB,SAACC,GACdN,EAAKM,EAAMC,OAAOH,WAYhB,4BAAQA,MAASL,EAAGS,QArBH,SAACF,GACjBA,EAAMC,OAAOH,OAAS,IAAME,EAAMC,OAAOH,OAAS,GAA4BK,MAAvBH,EAAMC,OAAOH,MACrEM,MAAM,6BAENd,EAAMe,UAAUd,EAAKS,EAAMC,OAAOH,MAAQ,MAiB1C,kBASAQ,EAAQ,SAAC,GAAY,IAAXhB,EAAU,EAAVA,MAKRC,EAAO,CACX,CAACgB,KAAM,KAAMC,MAAO,KAAMC,QAAS,KAAMC,QAAS,KAAMC,MAAO,IAAKC,QAAS,KAAMC,YAAa,KAAMC,WAAY,KAAMC,OAAQ,KAAMC,OAAQ,KAAMC,MAAO,MAC3J,CAACV,KAAM,KAAMC,MAAO,KAAMC,QAAS,MAAOC,QAAS,MAAOC,MAAO,KAAKC,QAAS,KAAMC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,KAAMC,OAAQ,MAAOC,MAAO,MAChK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,KAAMC,QAAS,MAAOC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACpK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,KAAMC,QAAS,MAAOC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACpK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACrK,CAACV,KAAM,IAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACrK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACrK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACrK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,OAAQC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACtK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,OAAQC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,QAGlKC,EAAQ,CACZ,CAACX,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,EAAGC,QAAS,KAAMC,YAAa,EAAEC,WAAY,MAAOC,OAAQ,KAAMC,OAAQ,MAAOC,MAAO,MAC1J,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,EAAGC,QAAS,MAAOC,YAAa,EAAGC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OAC7J,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,EAAGC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACjK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,EAAGC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACjK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,EAAGC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACjK,CAACV,KAAM,IAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,MAAOC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACrK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,MAAOC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,OAAQC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACtK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,OAAQC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,MAAOC,WAAY,OAAQC,OAAQ,MAAOC,OAAQ,MAAOC,MAAO,OACvK,CAACV,KAAM,KAAMC,MAAO,MAAOC,QAAS,OAAQC,QAAS,MAAOC,MAAO,MAAOC,QAAS,MAAOC,YAAa,OAAQC,WAAY,OAAQC,OAAQ,OAAQC,OAAQ,MAAOC,MAAO,OACzK,CAACV,KAAM,KAAMC,MAAO,OAAQC,QAAS,OAAQC,QAAS,OAAQC,MAAO,MAAOC,QAAS,MAAOC,YAAa,OAAQC,WAAY,OAAQC,OAAQ,OAAQC,OAAQ,MAAMC,MAAO,QAGtKE,EAAQ,CACZF,MAAO,QACPR,QAAS,OACTD,MAAO,UACPE,QAAS,MACTC,MAAO,OACPC,QAAS,MACTC,YAAa,MACbC,WAAY,OACZE,OAAQ,MACRD,OAAQ,QAIJK,EAAS9B,EACfK,QAAQC,IAAI,MACZ,IAAIyB,EAAKC,KAAKC,IAAuE,IAAnED,KAAKE,KAAKF,KAAKC,IAAL,MAAAD,KAAI,YAAQ/B,EAAKkC,KAAI,SAACC,GAAD,OAAUA,EAAKN,QAAY,KAAiF,IAAjEE,KAAKE,KAAKF,KAAKC,IAAL,MAAAD,KAAI,YAAQ/B,EAAKkC,KAAI,SAACC,GAAD,OAAUA,EAAKT,WAAU,MAChJU,EAAML,KAAKC,IAAwE,IAApED,KAAKE,KAAKF,KAAKC,IAAL,MAAAD,KAAI,YAAQJ,EAAMO,KAAI,SAACC,GAAD,OAAUA,EAAKN,QAAY,KAAkF,IAAlEE,KAAKE,KAAKF,KAAKC,IAAL,MAAAD,KAAI,YAAQJ,EAAMO,KAAI,SAACC,GAAD,OAAUA,EAAKT,WAAU,MACvJtB,QAAQC,IAAI+B,GACZ,IAEIC,EAAWC,EAFXC,EAhDW,IAiDXC,EAjDW,IAoDf,OADApC,QAAQC,IAAIN,GAEV,6BACE,6BAAS0C,UAAY,WAEnB,kFACA,yBAAKC,MA1DG,IA0DaC,OAzDZ,KA0DL,uBAAGC,UAAY,sBACX,2BACI,0BACAC,GAAK,IACLC,GAAK,IACLC,GAAK,IACLC,GAhEH,IAiEGC,OAAS,OACTC,YAAc,OAGlB,2BACE,0BACAL,GAAK,IACLC,GAAMH,IACNI,GAAML,IACNM,GAAML,IACNM,OAAS,OACTC,YAAc,OAGhB,2BACE,6BACAC,GAAMT,IACNU,GAlFD,IAkFgB,EACfC,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMC,KAEd,0BACA2B,EAAKd,IAA8B,EAAhBb,EAAO4B,OAC1BC,EAzFD,IAyFe,EACdC,WAAa,MACbC,iBAAmB,WAElB/B,GAGD,6BACAsB,GAAMT,IACNU,GAAMT,OACNU,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMF,QAEd,0BACA8B,EAAKd,IACLgB,EAAKf,OACLgB,WAAa,MACbC,iBAAmB,WAElB,UAGH,2BACC5D,EAAKkC,KAAI,SAACC,EAAM0B,GAGjB,OAFErB,EAAUxC,EAAK+B,KAAKC,IAAI,EAAG6B,EAAI,IAAIhC,GACnCU,EAAWvC,EAAK+B,KAAKC,IAAI,EAAG6B,EAAI,IAArB,MAET,2BAEE,2BACE,0BACEhB,GAAMd,KAAKC,IAAI,EAAG,IAAM6B,EAAI,IAC5Bf,GA1HT,IA0HwBN,EAAUV,EAAV,IAA+B,GAC9CiB,GAAM,GAAMc,EACZb,GA5HT,IA4HwBb,EAAKN,GAAUC,EAAf,IAAmC,GAClDmB,OAAS,SAEX,0BACEJ,GAAMd,KAAKC,IAAI,EAAG,IAAM6B,EAAI,IAC5Bf,GAjIT,IAiIwBP,EAAWT,EAAX,IAAgC,GAC/CiB,GAAM,GAAKc,EACXb,GAnIT,IAmIwBb,EAAKT,MAAQI,EAAb,IAAkC,GACjDmB,OAAS,OACTM,KAAQ3B,EAAMF,SAGlB,uBACAoC,IAAO3B,EAAKnB,KACZ4B,UAAS,oBAAiB,GAAMiB,EAAvB,SAET,6BACEV,GAAM,EACNC,GA9IP,IA8IsBjB,EAAKN,GAAUC,EAAf,IAAoC,GACnDuB,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMC,KAEhB,6BACEsB,GAAM,EACNC,GArJP,IAqJsBjB,EAAKT,MAAQI,EAAb,IAAkC,GACjDuB,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMF,QAEhB,0BACI8B,EAAI,KACJE,EAAKf,IACLgB,WAAa,MACbC,iBAAmB,WAElBzB,EAAKnB,OAGV,uBACE8C,IAAO,IAAOD,EACdjB,UAAS,wBAAqB,IAAMiB,EAAI,GAA/B,MAEX,0BACIhB,GAAK,IACLC,GAAMH,IACNI,GAAML,IACNM,GAAML,IACNM,OAAS,SAEb,0BACIO,EAAI,KACJE,EAAKf,IACLgB,WAAa,MACbC,iBAAmB,WAElB9B,EAAK,IAAM+B,EAAI,KAGtB,0BACAL,EAAI,KACJE,EAAKf,IACLgB,WAAa,MACbC,iBAAmB,WAElB,UAWf,6GACE,yBAAKlB,MA1MG,IA0MaC,OAzMZ,KA0ML,uBAAGC,UAAY,sBACX,2BACI,0BACAC,GAAK,IACLC,GAAK,IACLC,GAAK,IACLC,GAhNH,IAiNGC,OAAS,OACTC,YAAc,OAGlB,2BACE,0BACAL,GAAK,IACLC,GAAMH,IACNI,GAAML,IACNM,GAAML,IACNM,OAAS,OACTC,YAAc,OAGhB,2BACE,6BACAC,GAAMT,IACNU,GAlOD,IAkOgB,EACfC,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMC,KAEd,0BACA2B,EAAKd,IAA8B,EAAhBb,EAAO4B,OAC1BC,EAzOD,IAyOe,EACdC,WAAa,MACbC,iBAAmB,WAElB/B,GAGD,6BACAsB,GAAMT,IACNU,GAAMT,OACNU,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMF,QAEd,0BACA8B,EAAKd,IACLgB,EAAKf,OACLgB,WAAa,MACbC,iBAAmB,WAElB,UAGH,2BACCjC,EAAMO,KAAI,SAACC,EAAM0B,GAGlB,OAFEvB,EAAWX,EAAMI,KAAKC,IAAI,EAAG6B,EAAI,IAAIhC,GACrCQ,EAAYV,EAAMI,KAAKC,IAAI,EAAG6B,EAAI,IAAtB,MAEV,2BAEE,2BACE,0BACEhB,GAAMd,KAAKC,IAAI,EAAG,IAAM6B,EAAI,IAC5Bf,GA1QT,IA0QwBR,EAAWF,EAAX,IAAiC,GAChDW,GAAM,GAAMc,EACZb,GA5QT,IA4QwBb,EAAKN,GAAUO,EAAf,IAAoC,GACnDa,OAAS,SAEX,0BACEJ,GAAMd,KAAKC,IAAI,EAAG,IAAM6B,EAAI,IAC5Bf,GAjRT,IAiRwBT,EAAYD,EAAZ,IAAkC,GACjDW,GAAM,GAAKc,EACXb,GAnRT,IAmRwBb,EAAKT,MAAQU,EAAb,IAAmC,GAClDa,OAAS,OACTM,KAAQ3B,EAAMF,SAGlB,uBACAoC,IAAO3B,EAAKnB,KACZ4B,UAAS,oBAAiB,GAAMiB,EAAvB,SAET,6BACEV,GAAM,EACNC,GA9RP,IA8RsBjB,EAAKN,GAAUO,EAAf,IAAqC,GACpDiB,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMC,KAEhB,6BACEsB,GAAM,EACNC,GArSP,IAqSsBjB,EAAKT,MAAQU,EAAb,IAAmC,GAClDiB,GAAK,IACLC,GAAK,IACLC,KAAQ3B,EAAMF,QAEhB,0BACI8B,EAAI,KACJE,EAAKf,IACLgB,WAAa,MACbC,iBAAmB,WAElBzB,EAAKnB,OAGV,uBACE8C,IAAO,IAAOD,EACdjB,UAAS,wBAAqB,IAAMiB,EAAI,GAA/B,MAEX,0BACIhB,GAAK,IACLC,GAAMH,IACNI,GAAML,IACNM,GAAML,IACNM,OAAS,SAEb,0BACIO,EAAI,KACJE,EAAKf,IACLgB,WAAa,MACbC,iBAAmB,WAElBxB,EAAM,IAAMyB,EAAI,KAGvB,0BACAL,EAAI,KACJE,EAAKf,IACLgB,WAAa,MACbC,iBAAmB,WAElB,aA6BNG,EAbH,WAAO,IAAD,EACY9D,mBAAS,IADrB,mBACT4B,EADS,KACDf,EADC,KAIhB,OACE,6BACE,kBAAC,EAAD,CAAUA,UAAqBA,IAC9BV,QAAQC,IAAIwB,GACb,kBAAC,EAAD,CAAO9B,MAAS8B,MCpYtBmC,iBAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,c","file":"static/js/main.ed1909df.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nconst NameForm = (props) => {\n  const data = [\"Italy\",   \"America\", \"Germany\", \"Korea\", \"England\", \"Switzerland\", \"Luxembourg\", \"France\", \"Canada\"]\n  const handleChange = (event) => {\n    if(event.target.value >= 10 || event.target.value <= 0 || event.target.value === NaN){\n      alert(\"That number is incorrect.\")\n    }else{\n      props.setContry(data[event.target.value - 1])\n    }\n  }\n\n  const change = (event) => {\n    setS(event.target.value)\n  }\n  const [s, setS] = useState(\"\")\n  console.log(s)\n  return (\n    <div>\n      <p>国番号を入力:</p>\n      <p>(1.イタリア　2.アメリカ　3.ドイツ　4.韓国　5.イングランド　6.スイス　7.ルクセンブルグ　8.フランス　9.カナダ)</p>\n      <label>\n        \n        <input type=\"text\" value={s} onChange = {change}/>\n      </label>\n      <button value = {s} onClick = {handleChange}>\n        描画\n      </button>\n    </div>\n  );\n}\n\n\n\nconst Graph = ({props}) =>{\n  const width = 700\n  const height = 565\n\n\n  const data = [\n    {year: 1970, Italy: 4154, America: 6093, Germany: 5292, Korea: 754, England: 4172, Switzerland: 8229, Luxembourg: 6377, France: 4368, Canada: 5415, Japan: 3990},\n    {year: 1980, Italy: 9795, America: 12547, Germany: 11647, Korea: 2401,England: 8446, Switzerland: 15468, Luxembourg: 12729, France: 9671, Canada: 11749, Japan: 8798},\n    {year: 1985, Italy: 13707, America: 18192, Germany: 16219, Korea: 4528, England: 12210, Switzerland: 21031, Luxembourg: 18467, France: 13149, Canada: 16343, Japan: 13462}, \n    {year: 1990, Italy: 18609, America: 23835, Germany: 21471, Korea: 8273, England: 16701, Switzerland: 27267, Luxembourg: 29660, France: 17618, Canada: 20246, Japan: 19549},\n    {year: 1995, Italy: 22360, America: 28658, Germany: 23689, Korea: 13299, England: 20433, Switzerland: 29672, Luxembourg: 39550, France: 20750, Canada: 23476, Japan: 23410},\n    {year: 2000, Italy: 26076, America: 36305, Germany: 27551, Korea: 18083, England: 26258, Switzerland: 35434, Luxembourg: 55263, France: 26098, Canada: 29363, Japan: 26841},\n    {year: 2005, Italy: 30016, America: 44044, Germany: 32414, Korea: 24196, England: 32486, Switzerland: 40327, Luxembourg: 68414, France: 30504, Canada: 36329, Japan: 31668},\n    {year: 2010, Italy: 34831, America: 48396, Germany: 39916, Korea: 30365, England: 36016, Switzerland: 52860, Luxembourg: 85515, France: 35909, Canada: 40106, Japan: 34994},\n    {year: 2015, Italy: 36909, America: 56770, Germany: 47979, Korea: 35761, England: 42055, Switzerland: 63939, Luxembourg: 103788, France: 40841, Canada: 44671, Japan: 40406},\n    {year: 2018, Italy: 41837, America: 62853, Germany: 53749, Korea: 40096, England: 45505, Switzerland: 68079, Luxembourg: 113137, France: 45149, Canada: 48107, Japan: 42823},\n  ]\n\n  const data2 = [\n    {year: 1970, Italy: 10157, America: 13642, Germany: 10376, Korea: 0, England: 8113, Switzerland: 0,Luxembourg: 13117, France: 9424, Canada: 12627, Japan: 6700},\n    {year: 1980, Italy: 27213, America: 28774, Germany: 26499, Korea: 0, England: 19028, Switzerland: 0, Luxembourg: 29267, France: 24875, Canada: 26224, Japan: 18604},\n    {year: 1985, Italy: 37826, America: 40495, Germany: 37173, Korea: 12342, England: 28465, Switzerland: 0, Luxembourg: 41947, France: 35264, Canada: 36322, Japan: 28062},\n    {year: 1990, Italy: 49751, America: 50198, Germany: 47680, Korea: 19612, England: 35645, Switzerland: 0, Luxembourg: 60108, France: 44500, Canada: 42842, Japan: 38668},\n    {year: 1995, Italy: 64028, America: 61167, Germany: 53831, Korea: 29376, England: 46514, Switzerland: 0, Luxembourg: 74946, France: 53905, Canada: 51740, Japan: 45480},\n    {year: 2000, Italy: 73140, America: 74849, Germany: 61934, Korea: 40148, England: 56502, Switzerland: 66224, Luxembourg: 91456, France: 64537, Canada: 61044, Japan: 52810},\n    {year: 2005, Italy: 77951, America: 91982, Germany: 72506, Korea: 51066, England: 68290, Switzerland: 75919, Luxembourg: 103134, France: 77124, Canada: 72647, Japan: 63651},\n    {year: 2010, Italy: 92509, America: 107807, Germany: 84347, Korea: 62611, England: 77610, Switzerland: 98690, Luxembourg: 120710, France: 90727, Canada: 80394, Japan: 71144},\n    {year: 2015, Italy: 99780, America: 122451, Germany: 97468, Korea: 69690, England: 87771, Switzerland: 116686, Luxembourg: 145515, France: 102908, Canada: 88869, Japan: 80231},\n    {year: 2018, Italy: 108890, America: 132127, Germany: 106315, Korea: 77219, England: 93482, Switzerland: 123979, Luxembourg: 153423, France: 111988, Canada: 95553,Japan: 81258},\n  ]\n\n  const color = {\n    Japan: \"black\", \n    America: \"blue\",\n    Italy: \"#00CC99\",\n    Germany: \"red\", \n    Korea: \"blue\", \n    England: \"red\", \n    Switzerland: \"red\", \n    Luxembourg: \"cyan\", \n    Canada: \"red\",\n    France: \"blue\",\n  }\n\n  const berHeight = 10;\n  const contry = props\n  console.log(\"OK\")\n  var mx = Math.max(Math.ceil(Math.max(...data.map((item) => item[contry])) / 10000) * 10000, Math.ceil(Math.max(...data.map((item) => item.Japan)) / 10000) * 10000)\n  var mx2 = Math.max(Math.ceil(Math.max(...data2.map((item) => item[contry])) / 10000) * 10000, Math.ceil(Math.max(...data2.map((item) => item.Japan)) / 10000) * 10000)\n  console.log(mx2)\n  var japanPre = height;\n  var contPre = height;\n  var japanPre2, contPre2;\n  console.log(props)\n  return (\n    <div>\n      <section className = \"section\">\n\n        <p>こちらがGDPのグラフ</p>\n        <svg width = {width} height = {height}>\n            <g transform = \"translate(90, -30)\">\n                <g>\n                    <line\n                    x1 = \"0\"\n                    y1 = \"0\"\n                    x2 = \"0\"\n                    y2 = {height}\n                    stroke = \"#888\"\n                    strokeWidth = \"2\"\n                     />\n                </g>\n                <g>\n                  <line\n                  x1 = \"0\"\n                  y1 = {height - 15}\n                  x2 = {width - 200}\n                  y2 = {height - 15}\n                  stroke = \"#888\"\n                  strokeWidth = \"2\"\n                  />\n                </g>\n                <g>\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color[contry]}\n                  />\n                  <text\n                  x = {width - 170 + contry.length * 8}\n                  y = {height / 4}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {contry}\n                  </text>\n\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4 + berHeight * 2}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color.Japan}\n                  />\n                  <text\n                  x = {width - 130}\n                  y = {height / 4 + 20}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {\"Japan\"}\n                  </text>\n                </g>\n                <g>\n                {data.map((item, i) =>{\n                  contPre = data[Math.max(0, i - 1)][contry]\n                  japanPre = data[Math.max(0, i - 1)][\"Japan\"]\n                return (\n                    <g>\n                      \n                      <g>\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - contPre / mx * (height - 65) - 15}\n                          x2 = {50 * (i)}\n                          y2 = {height - item[contry] / mx * (height -65) - 15}\n                          stroke = \"#888\"\n                          />\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - japanPre / mx * (height - 65) - 15}\n                          x2 = {50 * i}\n                          y2 = {height - item.Japan / mx * (height - 65) - 15}\n                          stroke = \"#888\"\n                          fill = {color.Japan}\n                          />\n                      </g>\n                      <g\n                      key = {item.year}\n                      transform = {`translate(${50 * (i)}, 0)`}\n                      >\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item[contry] / mx * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color[contry]}\n                      />\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item.Japan / mx * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color.Japan}\n                        />\n                      <text\n                          x = \"15\"\n                          y = {height + 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                      >\n                          {item.year}\n                      </text>\n                      </g>\n                      <g\n                        key = {5000 * i}\n                        transform = {`translate(0, ${-50 * (i + 1)})`}\n                      >\n                      <line\n                          x1 = \"0\"\n                          y1 = {height - 15}\n                          x2 = {width - 200}\n                          y2 = {height - 15}\n                          stroke = \"#888\"\n                      />\n                      <text\n                          x = \"-5\"\n                          y = {height - 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                          >\n                          {mx / 10 * (i + 1)}\n                          </text>\n                      </g>\n                    <text\n                    x = \"-5\"\n                    y = {height - 15}\n                    textAnchor = \"end\"\n                    dominantBaseline = \"central\"\n                    >\n                    {0}\n                    </text>\n                    </g>\n                )\n            })}\n            \n          </g>\n          \n        </g>\n        </svg>\n\n      <p>こちらは労働生産性のグラフ</p>\n        <svg width = {width} height = {height}>\n            <g transform = \"translate(90, -30)\">\n                <g>\n                    <line\n                    x1 = \"0\"\n                    y1 = \"0\"\n                    x2 = \"0\"\n                    y2 = {height}\n                    stroke = \"#888\"\n                    strokeWidth = \"2\"\n                     />\n                </g>\n                <g>\n                  <line\n                  x1 = \"0\"\n                  y1 = {height - 15}\n                  x2 = {width - 200}\n                  y2 = {height - 15}\n                  stroke = \"#888\"\n                  strokeWidth = \"2\"\n                  />\n                </g>\n                <g>\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color[contry]}\n                  />\n                  <text\n                  x = {width - 170 + contry.length * 8}\n                  y = {height / 4}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {contry}\n                  </text>\n\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4 + berHeight * 2}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color.Japan}\n                  />\n                  <text\n                  x = {width - 130}\n                  y = {height / 4 + 20}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {\"Japan\"}\n                  </text>\n                </g>\n                <g>\n                {data2.map((item, i) =>{\n                  contPre2 = data2[Math.max(0, i - 1)][contry]\n                  japanPre2 = data2[Math.max(0, i - 1)][\"Japan\"]\n                return (\n                    <g>\n                      \n                      <g>\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - contPre2 / mx2 * (height - 65) - 15}\n                          x2 = {50 * (i)}\n                          y2 = {height - item[contry] / mx2 * (height -65) - 15}\n                          stroke = \"#888\"\n                          />\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - japanPre2 / mx2 * (height - 65) - 15}\n                          x2 = {50 * i}\n                          y2 = {height - item.Japan / mx2 * (height - 65) - 15}\n                          stroke = \"#888\"\n                          fill = {color.Japan}\n                          />\n                      </g>\n                      <g\n                      key = {item.year}\n                      transform = {`translate(${50 * (i)}, 0)`}\n                      >\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item[contry] / mx2 * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color[contry]}\n                      />\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item.Japan / mx2 * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color.Japan}\n                        />\n                      <text\n                          x = \"15\"\n                          y = {height + 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                      >\n                          {item.year}\n                      </text>\n                      </g>\n                      <g\n                        key = {5000 * i}\n                        transform = {`translate(0, ${-50 * (i + 1)})`}\n                      >\n                      <line\n                          x1 = \"0\"\n                          y1 = {height - 15}\n                          x2 = {width - 200}\n                          y2 = {height - 15}\n                          stroke = \"#888\"\n                      />\n                      <text\n                          x = \"-5\"\n                          y = {height - 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                          >\n                          {mx2 / 10 * (i + 1)}\n                          </text>\n                      </g>\n                    <text\n                    x = \"-5\"\n                    y = {height - 15}\n                    textAnchor = \"end\"\n                    dominantBaseline = \"central\"\n                    >\n                    {0}\n                    </text>\n                    </g>\n                )\n            })}\n            \n          </g>\n          \n        </g>\n        </svg>\n      </section>\n    </div>\n  )\n}\n\n\nconst App = () => {\n  const [contry, setContry] = useState(\"\")\n\n\n  return (\n    <div>\n      <NameForm setContry = {contry, setContry}/>\n      {console.log(contry)}\n      <Graph props = {contry}/>\n    </div>\n  )\n}\n\nexport default App;","import 'bulma/css/bulma.css'\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.querySelector(\"#content\"));"],"sourceRoot":""}